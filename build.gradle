buildscript {
    dependencies {
        classpath 'org.postgresql:postgresql:42.2.9'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'nu.studer.jooq' version '4.1'
    id "org.flywaydb.flyway" version "6.2.1"
    id 'com.github.ben-manes.versions' version '0.27.0'
    id "io.freefair.lombok" version "4.1.6"
    id "com.diffplug.gradle.spotless" version "3.27.1"
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

repositories {
    jcenter()
}

application {
    mainClassName = 'com.marqusm.example.moneytransaction.App'
    applicationDefaultJvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED']
}

test {
    useJUnitPlatform()
}

spotless {
    java {
        target project.fileTree(project.rootDir) {
            include '**/*.java'
            exclude '**/generated/**/*.*'
        }
        googleJavaFormat()
    }
}

flyway {
    url = 'jdbc:postgresql://localhost:5435/money-transactions'
    user = 'postgres'
    password = 'postgres'
}

dependencies {
    implementation 'org.yaml:snakeyaml:1.25'
    implementation 'com.sparkjava:spark-core:2.9.1'
    runtimeOnly 'org.postgresql:postgresql:42.2.9'
    jooqRuntime 'org.postgresql:postgresql:42.2.9'
    implementation 'org.jooq:jooq'
    implementation 'com.zaxxer:HikariCP:3.4.2'
    implementation 'org.flywaydb:flyway-core:6.2.1'
    implementation 'com.google.inject:guice:4.2.2'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    implementation 'io.rest-assured:rest-assured:4.2.0'
    testImplementation 'com.sparkjava:spark-core:2.9.1'
}

jooq {
    sql(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5435/money-transactions'
            user = 'postgres'
            password = 'postgres'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                includes = '.*'
                excludes = ''
                inputSchema = 'public'
                includeRoutines = false
            }
            target {
                packageName = 'com.marqusm.example.moneytransaction.common.model.generated.jooq'
                directory = 'src/main/java'
            }
        }
    }
}

tasks.generateSqlJooqSchemaSource.with {
    def out = new ByteArrayOutputStream()
    javaExecSpec = { JavaExecSpec s ->
        s.standardOutput = out
        s.errorOutput = out
        s.ignoreExitValue = true
        s.jvmArgs '-Xmx512M'
    }
    execResultHandler = { ExecResult r ->
        if (r.exitValue != 0) {
            throw new RuntimeException('jOOQ source code generation failed:\n\n' + out.toString())
        }
    }
}